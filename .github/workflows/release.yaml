name: release

# Run workflow on push to the `main` branch
on: 
  push:
    branches: ["main-ls2"]

jobs:
  merge_release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SECRET_KEY }}

      - name: Install Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: "temurin"
          cache: "maven"
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Clean Maven Project Version
        id: set-version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $current_version"
          new_version=$(echo $current_version | sed 's/-SNAPSHOT//')
          echo "New version: $new_version"
          mvn -B versions:set -DnewVersion=$new_version
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add pom.xml
          git commit -m "Bump main version to $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}       
          
      - name: Build with Maven
        run: mvn -B verify -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # use tag from input
            type=raw,value=stable,enable=true
          labels: |
            maintainer=it@m, Landeshauptstadt Muenchen (LHM)

  github-release:
    needs: merge_release
    name: Create github release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get New Project Version
        id: get-version
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          new_version=$(echo $current_version | sed 's/-SNAPSHOT//')
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.get-version.outputs.new_version }}',
              sha: context.sha
            })

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.new_version }}
          release_name: Release ${{ steps.get-version.outputs.new_version }}
          draft: false
          prerelease: false
