/*
 * DAVE GEODATA EAI
 * DAVE GEODATA EAI - Service zum Abfragen von Geoinformationen
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: unbekannt@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.muenchen.dave.geodateneai.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.muenchen.dave.geodateneai.gen.model.ModelLocalTime;
import java.time.LocalTime;
import java.time.LocalDate;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GetMeasurementValuesRequest
 */
@JsonPropertyOrder({
  GetMeasurementValuesRequest.JSON_PROPERTY_MESSQUERSCHNITT_IDS,
  GetMeasurementValuesRequest.JSON_PROPERTY_ZEITPUNKT_START,
  GetMeasurementValuesRequest.JSON_PROPERTY_ZEITPUNKT_ENDE,
  GetMeasurementValuesRequest.JSON_PROPERTY_TAGES_TYP,
  GetMeasurementValuesRequest.JSON_PROPERTY_ZEITINTERVALL,
  GetMeasurementValuesRequest.JSON_PROPERTY_UHRZEIT_START,
  GetMeasurementValuesRequest.JSON_PROPERTY_UHRZEIT_ENDE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetMeasurementValuesRequest {
  public static final String JSON_PROPERTY_MESSQUERSCHNITT_IDS = "messquerschnittIds";
  private Set<String> messquerschnittIds = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_ZEITPUNKT_START = "zeitpunktStart";
  private LocalDate zeitpunktStart;

  public static final String JSON_PROPERTY_ZEITPUNKT_ENDE = "zeitpunktEnde";
  private LocalDate zeitpunktEnde;

  /**
   * Gets or Sets tagesTyp
   */
  public enum TagesTypEnum {
    WERKTAG_DI_MI_DO("WERKTAG_DI_MI_DO"),
    
    WERKTAG_MO_FR("WERKTAG_MO_FR"),
    
    SAMSTAG("SAMSTAG"),
    
    SONNTAG_FEIERTAG("SONNTAG_FEIERTAG"),
    
    WERKTAG_FERIEN("WERKTAG_FERIEN"),
    
    MO_SO("MO_SO");

    private String value;

    TagesTypEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TagesTypEnum fromValue(String value) {
      for (TagesTypEnum b : TagesTypEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TAGES_TYP = "tagesTyp";
  private TagesTypEnum tagesTyp;

  public static final String JSON_PROPERTY_ZEITINTERVALL = "zeitintervall";
  private String zeitintervall;

  public static final String JSON_PROPERTY_UHRZEIT_START = "uhrzeitStart";
  private LocalTime uhrzeitStart;

  public static final String JSON_PROPERTY_UHRZEIT_ENDE = "uhrzeitEnde";
  private LocalTime uhrzeitEnde;

  public GetMeasurementValuesRequest() {
  }

  public GetMeasurementValuesRequest messquerschnittIds(Set<String> messquerschnittIds) {
    
    this.messquerschnittIds = messquerschnittIds;
    return this;
  }

  public GetMeasurementValuesRequest addMessquerschnittIdsItem(String messquerschnittIdsItem) {
    if (this.messquerschnittIds == null) {
      this.messquerschnittIds = new LinkedHashSet<>();
    }
    this.messquerschnittIds.add(messquerschnittIdsItem);
    return this;
  }

   /**
   * Get messquerschnittIds
   * @return messquerschnittIds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSQUERSCHNITT_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Set<String> getMessquerschnittIds() {
    return messquerschnittIds;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_MESSQUERSCHNITT_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessquerschnittIds(Set<String> messquerschnittIds) {
    this.messquerschnittIds = messquerschnittIds;
  }


  public GetMeasurementValuesRequest zeitpunktStart(LocalDate zeitpunktStart) {
    
    this.zeitpunktStart = zeitpunktStart;
    return this;
  }

   /**
   * Get zeitpunktStart
   * @return zeitpunktStart
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZEITPUNKT_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getZeitpunktStart() {
    return zeitpunktStart;
  }


  @JsonProperty(JSON_PROPERTY_ZEITPUNKT_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setZeitpunktStart(LocalDate zeitpunktStart) {
    this.zeitpunktStart = zeitpunktStart;
  }


  public GetMeasurementValuesRequest zeitpunktEnde(LocalDate zeitpunktEnde) {
    
    this.zeitpunktEnde = zeitpunktEnde;
    return this;
  }

   /**
   * Get zeitpunktEnde
   * @return zeitpunktEnde
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZEITPUNKT_ENDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getZeitpunktEnde() {
    return zeitpunktEnde;
  }


  @JsonProperty(JSON_PROPERTY_ZEITPUNKT_ENDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setZeitpunktEnde(LocalDate zeitpunktEnde) {
    this.zeitpunktEnde = zeitpunktEnde;
  }


  public GetMeasurementValuesRequest tagesTyp(TagesTypEnum tagesTyp) {
    
    this.tagesTyp = tagesTyp;
    return this;
  }

   /**
   * Get tagesTyp
   * @return tagesTyp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAGES_TYP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TagesTypEnum getTagesTyp() {
    return tagesTyp;
  }


  @JsonProperty(JSON_PROPERTY_TAGES_TYP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagesTyp(TagesTypEnum tagesTyp) {
    this.tagesTyp = tagesTyp;
  }


  public GetMeasurementValuesRequest zeitintervall(String zeitintervall) {
    
    this.zeitintervall = zeitintervall;
    return this;
  }

   /**
   * Get zeitintervall
   * @return zeitintervall
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZEITINTERVALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getZeitintervall() {
    return zeitintervall;
  }


  @JsonProperty(JSON_PROPERTY_ZEITINTERVALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setZeitintervall(String zeitintervall) {
    this.zeitintervall = zeitintervall;
  }


  public GetMeasurementValuesRequest uhrzeitStart(LocalTime uhrzeitStart) {
    
    this.uhrzeitStart = uhrzeitStart;
    return this;
  }

   /**
   * Get uhrzeitStart
   * @return uhrzeitStart
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UHRZEIT_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalTime getUhrzeitStart() {
    return uhrzeitStart;
  }


  @JsonProperty(JSON_PROPERTY_UHRZEIT_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUhrzeitStart(LocalTime uhrzeitStart) {
    this.uhrzeitStart = uhrzeitStart;
  }


  public GetMeasurementValuesRequest uhrzeitEnde(LocalTime uhrzeitEnde) {
    
    this.uhrzeitEnde = uhrzeitEnde;
    return this;
  }

   /**
   * Get uhrzeitEnde
   * @return uhrzeitEnde
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UHRZEIT_ENDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalTime getUhrzeitEnde() {
    return uhrzeitEnde;
  }


  @JsonProperty(JSON_PROPERTY_UHRZEIT_ENDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUhrzeitEnde(LocalTime uhrzeitEnde) {
    this.uhrzeitEnde = uhrzeitEnde;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMeasurementValuesRequest getMeasurementValuesRequest = (GetMeasurementValuesRequest) o;
    return Objects.equals(this.messquerschnittIds, getMeasurementValuesRequest.messquerschnittIds) &&
        Objects.equals(this.zeitpunktStart, getMeasurementValuesRequest.zeitpunktStart) &&
        Objects.equals(this.zeitpunktEnde, getMeasurementValuesRequest.zeitpunktEnde) &&
        Objects.equals(this.tagesTyp, getMeasurementValuesRequest.tagesTyp) &&
        Objects.equals(this.zeitintervall, getMeasurementValuesRequest.zeitintervall) &&
        Objects.equals(this.uhrzeitStart, getMeasurementValuesRequest.uhrzeitStart) &&
        Objects.equals(this.uhrzeitEnde, getMeasurementValuesRequest.uhrzeitEnde);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messquerschnittIds, zeitpunktStart, zeitpunktEnde, tagesTyp, zeitintervall, uhrzeitStart, uhrzeitEnde);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMeasurementValuesRequest {\n");
    sb.append("    messquerschnittIds: ").append(toIndentedString(messquerschnittIds)).append("\n");
    sb.append("    zeitpunktStart: ").append(toIndentedString(zeitpunktStart)).append("\n");
    sb.append("    zeitpunktEnde: ").append(toIndentedString(zeitpunktEnde)).append("\n");
    sb.append("    tagesTyp: ").append(toIndentedString(tagesTyp)).append("\n");
    sb.append("    zeitintervall: ").append(toIndentedString(zeitintervall)).append("\n");
    sb.append("    uhrzeitStart: ").append(toIndentedString(uhrzeitStart)).append("\n");
    sb.append("    uhrzeitEnde: ").append(toIndentedString(uhrzeitEnde)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

